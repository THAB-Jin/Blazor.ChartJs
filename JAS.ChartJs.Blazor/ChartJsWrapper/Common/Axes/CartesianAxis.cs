using ChartJsWrapper.Common.Enums;
using Newtonsoft.Json;
using ChartJsWrapper.Common.Axes.Ticks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChartJsWrapper.Common.Axes
{
    public abstract class CartesianAxis : Axis
    {
        /// The type of axis this instance represents.
        /// <para>For js-interop/serialization purposes so Chart.js knows what axis to use.</para>
        public abstract AxisType Type { get; }

        /// The ID is used to link <see cref="LineDataset{T}"/>/<see cref="BarDataset{T}"/> and <see cref="CartesianAxis"/> together.
        /// Referenced in <see cref="LineDataset{T}.XAxisId"/> and <seealso cref="LineDataset{T}.YAxisId"/>
        /// (<see cref="BarDataset{T}.XAxisId"/> and <seealso cref="BarDataset{T}.YAxisId"/> respectively).
        [JsonProperty("id")]
        public string ID { get; set; }

        /// Gets or sets the position of the axis in the chart.
        public Positions Position { get; set; }

        /// If true, extra space is added to the both edges and the axis is scaled to fit into the chart area.
        /// This is set to true for a category scale in a bar chart by default.
        public bool? Offset { get; set; }

        /// Gets or sets the scale title configuration.
        public ScaleLabel ScaleLabel { get; set; }

        /// Defines options for the grid lines that run perpendicular to the axis.
        public GridLines GridLines { get; set; }
    }
    /// <see cref="CartesianAxis"/> which contains the ticks-subconfig.
    public abstract class CartesianAxis<TTicks> : CartesianAxis 
        where TTicks : CartesianTicks
    {
        /// Defines options for the tick marks that are generated by the axis.
        public TTicks Ticks { get; set; }
    }
}
